###############################################
# SiddiqSoft Azure DevOps Pipelines Template  #
# For C++ Projects                            #
# Version 2.0                                 #
###############################################
trigger:
  batch: 'true'
  branches:
    include:
    - master
    - main
    - bufix/*
    - release/*
    - hotfix/*
    - feature/*
  paths:
    exclude:
    - README.md

stages:
################################## STAGE ####################################
# STAGE: BuildTest                                                          #
#############################################################################
- stage: BuildTest
  displayName: 'Building, Testing and Package'
  jobs:
  - job: buildWindows
    displayName: 'Build and Test Windows'
    workspace:
      clean: all
    pool:
      name: Default
      vmImage:
      demands:
        - Agent.OS -equals Windows_NT
    strategy:
      matrix:
        Debug:
          BuildType: Debug
          cmake.preset: 'Windows-$(BuildType)'
          MSBuildConfiguration: Debug
        Release:
          BuildType: Release
          cmake.preset: 'Windows-$(BuildType)'
          MSBuildConfiguration: Release
    steps:
    - checkout: self
      fetchDepth: 0
      name: step1
    - task: gitversion/setup@3
      displayName: 'Install GitVersion..'
      inputs:
        versionSpec: '6.0'
        preferLatestVersion: true
    - task: gitversion/execute@3
      displayName: 'Determine Version..'
      name: version_step
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'
    - task: CMake@1
      displayName: 'CMake Configure $(cmake.preset)'
      inputs:
        cmakeArgs: '--preset $(cmake.preset) -DCI_BUILDID=$(GitVersion.MajorMinorPatch)  -DCPM_SOURCE_CACHE=$(Agent.HomeDirectory)/.cpmcache'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CMake@1
      displayName: 'CMake Build $(cmake.preset)'
      inputs:
        cmakeArgs: '--build --preset $(cmake.preset) -DCI_BUILDID=$(GitVersion.MajorMinorPatch)  -DCPM_SOURCE_CACHE=$(Agent.HomeDirectory)/.cpmcache'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: succeeded()
    - task: CMake@1
      displayName: 'CMake Tests $(cmake.preset)'
      inputs:
        cmakeArgs: '-E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests ctest $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests --output-junit $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/$(cmake.preset)_test_detail.xml --output-on-failure'
      continueOnError: true
      condition: succeeded()
    - task: PublishTestResults@2
      displayName: 'Publish $(BuildType) Test Results $(cmake.preset)_test_detail.xml'
      inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/$(cmake.preset)_test_detail.xml'
          mergeTestResults: false
          buildConfiguration: '$(BuildType)'
      continueOnError: true
      condition: succeeded()
    - task: NuGetToolInstaller@1
      displayName: 'Install Nuget on Windows'
      inputs:
        versionSpec: '>=6.0.0-0'
        checkLatest: true
      condition: and(succeeded(), startsWith(variables['Agent.OS'], 'Windows'))
    - task: NuGetCommand@2
      displayName: 'NuGet pack v$(GitVersion.MajorMinorPatch)'
      inputs:
        command: 'pack'
        packagesToPack: 'pack/*.nuspec'
        versioningScheme: 'off'
        buildProperties: 'VERSION=$(GitVersion.MajorMinorPatch)'
      condition: and(succeeded(), startsWith(variables['Agent.OS'], 'Windows'))
    - task: NuGetCommand@2
      displayName: 'NuGet push (Windows only)'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;build/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'sqs-nuget'
      condition: and(succeeded(), eq(variables['BuildType'], 'Release'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master')), startsWith(variables['Agent.OS'], 'Windows'))
    - task: GitHubRelease@1
      displayName: 'Release to GitHub'
      inputs:
        gitHubConnection: 'github-packages-sqs'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(GitVersion.MajorMinorPatch)'
        title: 'v$(GitVersion.MajorMinorPatch)'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Documentation https://github.com/$(Build.Repository.Name)'
        isPreRelease: true
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        addChangeLog: false
        assetUploadMode: 'replace'
      condition: and(succeeded(), eq(variables['BuildType'], 'Release'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master')), startsWith(variables['Agent.OS'], 'Windows'))
#   ##################################################################################################### #### ## #
#   #### Job buildLinux ################################################################################# #### ## #
#   ##################################################################################################### #### ## #
  - job: buildLinux
    displayName: 'Build and Test Linux'
    workspace:
      clean: all
    pool:
      name: Default
      vmImage:
      demands:
        - Agent.OS -equals Linux
    strategy:
      matrix:
        GCC-Debug:
          BuildType: Debug
          cmake.preset: 'Linux-GCC-$(BuildType)'
          MSBuildConfiguration: Debug
          cmakeExtraArgs: 
        GCC-Release:
          BuildType: Release
          cmake.preset: 'Linux-GCC-$(BuildType)'
          cmakeExtraArgs: 
          MSBuildConfiguration: Release
        Clang-Debug:
          BuildType: Debug
          cmake.preset: 'Linux-Clang-$(BuildType)'
          MSBuildConfiguration: Debug
          cmakeExtraArgs: 
        Clang-Release:
          BuildType: Release
          cmake.preset: 'Linux-Clang-$(BuildType)'
          cmakeExtraArgs: 
          MSBuildConfiguration: Release
    steps:
    - checkout: self
      fetchDepth: 0
      name: step1
    - task: gitversion/setup@3
      displayName: 'Install GitVersion..'
      inputs:
        versionSpec: '6.0'
        preferLatestVersion: true
    - task: gitversion/execute@3
      displayName: 'Determine Version..'
      name: version_step
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'
    - task: CMake@1
      displayName: 'CMake Configure $(cmake.preset)'
      inputs:
        cmakeArgs: '--preset $(cmake.preset) -DCI_BUILDID=$(GitVersion.MajorMinorPatch)  -DCPM_SOURCE_CACHE=$(Agent.HomeDirectory)/.cpmcache'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CMake@1
      displayName: 'CMake Build $(cmake.preset)'
      inputs:
        cmakeArgs: '--build --preset $(cmake.preset) -DCI_BUILDID=$(GitVersion.MajorMinorPatch)  -DCPM_SOURCE_CACHE=$(Agent.HomeDirectory)/.cpmcache'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: succeeded()
    - task: CMake@1
      displayName: 'CMake Tests $(cmake.preset)'
      env:
        "CTEST_OUTPUT_ON_FAILURE": "TRUE"
      inputs:
        cmakeArgs: '-E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests ctest $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests --output-junit $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/$(cmake.preset)_test_detail.xml --output-on-failure --verbose'
      condition: succeeded()
      continueOnError: true
    - task: CMake@1
      displayName: 'CTest Coverage $(cmake.preset) (Linux only)'
      env:
        "CTEST_OUTPUT_ON_FAILURE": "TRUE"
      inputs:
        cmakeArgs: '-E chdir $(System.DefaultWorkingDirectory)/build/$(cmake.preset) ctest $(System.DefaultWorkingDirectory)/build/$(cmake.preset) --output-junit $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/$(cmake.preset)_test_detail.xml --output-on-failure --verbose -T Test -T Coverage'
      condition: and(succeeded(), eq(variables['BuildType'], 'Debug'), startsWith(variables['Agent.OS'], 'Linux'), startsWith(variables['Agent.OSArchitecture'], 'X64'))
      continueOnError: true
    - task: CmdLine@2
      displayName: 'Coverage collection (Linux builds Only)'
      inputs:
        script: |
          echo "gcovr --delete --root ../../ --print-summary --xml-pretty --xml coverage.xml .  --filter='$(System.DefaultWorkingDirectory)/include/siddiqsoft/*' --filter='$(System.DefaultWorkingDirectory)/tests/*' --gcov-executable 'llvm-cov gcov'"
          gcovr --delete --root $(System.DefaultWorkingDirectory)/ --print-summary --xml-pretty --xml $(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/coverage.xml $(System.DefaultWorkingDirectory)/build/$(cmake.preset)  --filter='$(System.DefaultWorkingDirectory)/include/*' --filter='$(System.DefaultWorkingDirectory)/tests/*' --gcov-executable 'llvm-cov gcov'
        workingDirectory: '$(System.DefaultWorkingDirectory)/build/$(cmake.preset)'
      condition: and(succeeded(), eq(variables['BuildType'], 'Debug'), startsWith(variables['Agent.OS'], 'Linux'), startsWith(variables['Agent.OSArchitecture'], 'X64'))
    - task: PublishTestResults@2
      displayName: 'Publish $(BuildType) Test Results $(cmake.preset)_test_detail.xml'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/$(cmake.preset)_test_detail.xml'
        mergeTestResults: false
        buildConfiguration: '$(BuildType)'
      continueOnError: false
      condition: succeeded()
    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Coverage Results (Linux builds)'
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/$(cmake.preset)/tests/results/coverage.*'
      condition: and(succeeded(), startsWith(variables['Agent.OS'], 'Linux'), startsWith(variables['Agent.OSArchitecture'], 'X64'), eq(variables['BuildType'], 'Debug'))
    